<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在 HarmonyOS 中如何使用 Native C++</title>
    <url>/posts/92e22166.html</url>
    <content><![CDATA[<p><img src="/posts/92e22166/image.png"></p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote>
<ul>
<li>工具: <a href="https://developer.huawei.com/consumer/cn/deveco-studio/">HUAWEI DevEco Studio</a></li>
</ul>
</blockquote>
<p><img src="/posts/92e22166/about-deveco-studio.png"></p>
<blockquote>
<ul>
<li>设备: 支持HarmonyOS NEXT 的设备（真机&#x2F;模拟器）</li>
</ul>
</blockquote>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>新建一个项目，选择 [Native C++] 的模版</p>
<p><img src="/posts/92e22166/image.png"></p>
<p>然后生成一个默认的工程</p>
<blockquote>
<p>API 版本 : <strong>5.0.1 (API 13)</strong></p>
</blockquote>
<p><img src="/posts/92e22166/default_project.png"></p>
<h2 id="分析项目"><a href="#分析项目" class="headerlink" title="分析项目"></a>分析项目</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hilog &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.PerformanceAnalysisKit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> testNapi <span class="keyword">from</span> <span class="string">&#x27;libentry.so&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Index</span> &#123;</span><br><span class="line">  <span class="meta">@State</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Row</span>() &#123;</span><br><span class="line">      <span class="title class_">Column</span>() &#123;</span><br><span class="line">        <span class="title class_">Text</span>(<span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line">          .<span class="title function_">fontSize</span>(<span class="number">50</span>)</span><br><span class="line">          .<span class="title function_">fontWeight</span>(<span class="title class_">FontWeight</span>.<span class="property">Bold</span>)</span><br><span class="line">          .<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;Test NAPI 2 + 3 = %&#123;public&#125;d&#x27;</span>, testNapi.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_">height</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析这个默认工程，根据index.ets代码显示，是在Native下注册是add的计算方法，通过传入两个参数计算和，文中传入了 2 和 3，当点击界面上的Hello world 文本时调用计算方法，日志输出如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12-19  55333-55333   A00000/com..../testTag  com.xw....lication  I     Test NAPI 2 + 3 = 5</span><br></pre></td></tr></table></figure>

<p>点击16行，testNapi.add() 方法跳过去，在 <strong>index.d.ts</strong> 中定义了接口方法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">add</span>: <span class="function">(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure>
<p>这个 testNapi 又是通过 <strong>libentry.so</strong> 引入的</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> testNapi <span class="keyword">from</span> <span class="string">&#x27;libentry.so&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>在 <strong>CMakeLists</strong> 15行 我们可以链接库的地方</p>
<p><img src="/posts/92e22166/default_project_cmake.png"></p>
<p>接着打开 cpp 目录下的 <strong>napi_init.cpp</strong> 文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;napi/native_api.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> napi_value <span class="title">Add</span><span class="params">(napi_env env, napi_callback_info info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">size_t</span> argc = <span class="number">2</span>;</span><br><span class="line">    napi_value args[<span class="number">2</span>] = &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">napi_get_cb_info</span>(env, info, &amp;argc, args , <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    napi_valuetype valuetype0;</span><br><span class="line">    <span class="built_in">napi_typeof</span>(env, args[<span class="number">0</span>], &amp;valuetype0);</span><br><span class="line"></span><br><span class="line">    napi_valuetype valuetype1;</span><br><span class="line">    <span class="built_in">napi_typeof</span>(env, args[<span class="number">1</span>], &amp;valuetype1);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> value0;</span><br><span class="line">    <span class="built_in">napi_get_value_double</span>(env, args[<span class="number">0</span>], &amp;value0);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> value1;</span><br><span class="line">    <span class="built_in">napi_get_value_double</span>(env, args[<span class="number">1</span>], &amp;value1);</span><br><span class="line"></span><br><span class="line">    napi_value sum;</span><br><span class="line">    <span class="built_in">napi_create_double</span>(env, value0 + value1, &amp;sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">EXTERN_C_START</span></span><br><span class="line"><span class="function"><span class="type">static</span> napi_value <span class="title">Init</span><span class="params">(napi_env env, napi_value exports)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    napi_property_descriptor desc[] = &#123;</span><br><span class="line">        &#123; <span class="string">&quot;add&quot;</span>, <span class="literal">nullptr</span>, Add, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, napi_default, <span class="literal">nullptr</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">napi_define_properties</span>(env, exports, <span class="built_in">sizeof</span>(desc) / <span class="built_in">sizeof</span>(desc[<span class="number">0</span>]), desc);</span><br><span class="line">    <span class="keyword">return</span> exports;</span><br><span class="line">&#125;</span><br><span class="line">EXTERN_C_END</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> napi_module demoModule = &#123;</span><br><span class="line">    .nm_version = <span class="number">1</span>,</span><br><span class="line">    .nm_flags = <span class="number">0</span>,</span><br><span class="line">    .nm_filename = <span class="literal">nullptr</span>,</span><br><span class="line">    .nm_register_func = Init,</span><br><span class="line">    .nm_modname = <span class="string">&quot;entry&quot;</span>,</span><br><span class="line">    .nm_priv = ((<span class="type">void</span>*)<span class="number">0</span>),</span><br><span class="line">    .reserved = &#123; <span class="number">0</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __attribute__((constructor)) <span class="function"><span class="type">void</span> <span class="title">RegisterEntryModule</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">napi_module_register</span>(&amp;demoModule);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按照以上的使用流程，接下来实现一个类似的示例</p>
<h2 id="修改项目"><a href="#修改项目" class="headerlink" title="修改项目"></a>修改项目</h2><blockquote>
<p>以下通过C API 获取设备信息 <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V13/_device_info-V13">DeviceInfo</a></p>
</blockquote>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><strong>CMakeList.txt</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># the minimum version of CMake.</span></span><br><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.5</span><span class="number">.0</span>)</span><br><span class="line"><span class="built_in">project</span>(HMBehavior)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(NATIVERENDER_ROOT_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(DEFINED PACKAGE_FIND_FILE)</span><br><span class="line">    <span class="built_in">include</span>($&#123;PACKAGE_FIND_FILE&#125;)</span><br><span class="line"><span class="built_in">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">include_directories</span>($&#123;NATIVERENDER_ROOT_PATH&#125;</span><br><span class="line">                    $&#123;NATIVERENDER_ROOT_PATH&#125;/include)</span><br><span class="line"></span><br><span class="line"><span class="built_in">add_library</span>(entry SHARED napi_init.cpp)</span><br><span class="line"><span class="built_in">target_link_libraries</span>(entry PUBLIC libace_napi.z.so)</span><br><span class="line"># 设备信息</span><br><span class="line"><span class="built_in">target_link_libraries</span>(entry PUBLIC libdeviceinfo_ndk.z.so)</span><br></pre></td></tr></table></figure>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在 <strong>napi_init.cpp</strong> 里定义一个函数 <strong>GetDeviceInfo</strong>,实现具体设备信息获取的逻辑</p>
<p>导包</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;napi/native_api.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;deviceinfo.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取设备信息</span></span><br><span class="line"><span class="comment"> * @param env</span></span><br><span class="line"><span class="comment"> * @param </span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> napi_value <span class="title">GetDeviceInfo</span><span class="params">(napi_env env, napi_callback_info)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    std::string deviceType = <span class="string">&quot;设备类型: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetDeviceType</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string manufacture = <span class="string">&quot;设备制造商: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetManufacture</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string brand = <span class="string">&quot;设备设备品牌: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetBrand</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string marketName = <span class="string">&quot;外部产品系列: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetMarketName</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string productSeries = <span class="string">&quot;产品系列: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetProductSeries</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string productModel = <span class="string">&quot;认证型号: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetProductModel</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string softwareModel = <span class="string">&quot;内部软件子型号: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetSoftwareModel</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string hardwareModel = <span class="string">&quot;硬件版本号: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetHardwareModel</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string bootloaderVersion = <span class="string">&quot;Bootloader版本号: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetBootloaderVersion</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string abiList = <span class="string">&quot;应用二进制接口（Abi）: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetAbiList</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string securityPatchTag = <span class="string">&quot;安全补丁级别: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetSecurityPatchTag</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string displayVersion = <span class="string">&quot;产品版本: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetDisplayVersion</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string IncrementalVersion = <span class="string">&quot;差异版本: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetIncrementalVersion</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string OSReleaseType = <span class="string">&quot;系统的发布类型: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetOsReleaseType</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string OSFullName = <span class="string">&quot;完整的系统版本名: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetOSFullName</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string sdkApiVersion = <span class="string">&quot;系统软件API版本: &quot;</span> + std::<span class="built_in">to_string</span>(<span class="built_in">OH_GetSdkApiVersion</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string firstApiVersion = <span class="string">&quot;首个版本系统软件API版本: &quot;</span> + std::<span class="built_in">to_string</span>(<span class="built_in">OH_GetFirstApiVersion</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string versionId = <span class="string">&quot;版本ID: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetVersionId</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string buildType = <span class="string">&quot;系统的构建类型: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetBuildType</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string buildUser = <span class="string">&quot;系统的构建用户: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetBuildUser</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string buildHost = <span class="string">&quot;系统的构建主机: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetBuildHost</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string buildTime = <span class="string">&quot;完整系统的构建时间: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetBuildTime</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string buildRootHash = <span class="string">&quot;系统的构建版本Hash: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetBuildRootHash</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string distributionOSName = <span class="string">&quot;ISV发行系统版本名称: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetDistributionOSName</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string distributionOSVersion = <span class="string">&quot;ISV发行版系统版本号: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetDistributionOSVersion</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string distributionOSApiVersion =<span class="string">&quot;ISV发行版系统api版本: &quot;</span> + std::<span class="built_in">to_string</span>(<span class="built_in">OH_GetDistributionOSApiVersion</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    std::string distributionOSReleaseType =<span class="string">&quot;ISV发行版系统类型: &quot;</span> + std::<span class="built_in">string</span>(<span class="built_in">OH_GetDistributionOSReleaseType</span>()) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取每个属性的长度</span></span><br><span class="line">    <span class="type">size_t</span> length1 = <span class="built_in">strlen</span>(deviceType.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length2 = <span class="built_in">strlen</span>(manufacture.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length3 = <span class="built_in">strlen</span>(brand.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length4 = <span class="built_in">strlen</span>(marketName.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length5 = <span class="built_in">strlen</span>(productSeries.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length6 = <span class="built_in">strlen</span>(productModel.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length7 = <span class="built_in">strlen</span>(softwareModel.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length8 = <span class="built_in">strlen</span>(hardwareModel.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length9 = <span class="built_in">strlen</span>(bootloaderVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length10 = <span class="built_in">strlen</span>(abiList.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length11 = <span class="built_in">strlen</span>(securityPatchTag.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length12 = <span class="built_in">strlen</span>(displayVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length13 = <span class="built_in">strlen</span>(IncrementalVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length14 = <span class="built_in">strlen</span>(OSReleaseType.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length15 = <span class="built_in">strlen</span>(OSFullName.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length16 = <span class="built_in">strlen</span>(sdkApiVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length17 = <span class="built_in">strlen</span>(firstApiVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length18 = <span class="built_in">strlen</span>(versionId.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length19 = <span class="built_in">strlen</span>(buildType.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length20 = <span class="built_in">strlen</span>(buildUser.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length21 = <span class="built_in">strlen</span>(buildHost.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length22 = <span class="built_in">strlen</span>(buildTime.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length23 = <span class="built_in">strlen</span>(buildRootHash.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length24 = <span class="built_in">strlen</span>(distributionOSName.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length25 = <span class="built_in">strlen</span>(distributionOSVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length26 = <span class="built_in">strlen</span>(distributionOSApiVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">size_t</span> length27 = <span class="built_in">strlen</span>(distributionOSReleaseType.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算拼接后的长度</span></span><br><span class="line">    <span class="type">size_t</span> resultLength = length1 + length2 + length3 + length4 + length5 + length6 + length7 + length8 + length9 +</span><br><span class="line">                          length10 + length11 + length12 + length13 + length14 + length15 + length16 + length17 +</span><br><span class="line">                          length18 + length19 + length20 + length21 + length22 + length23 + length24 + length25 +</span><br><span class="line">                          length26 + length27;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配内存以存储拼接后的字符串</span></span><br><span class="line">    <span class="type">char</span> *resultStr = (<span class="type">char</span> *)<span class="built_in">malloc</span>(resultLength + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 拼接字符串</span></span><br><span class="line">    <span class="built_in">strcpy</span>(resultStr, deviceType.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, manufacture.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, brand.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, marketName.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, productSeries.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, productModel.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, softwareModel.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, hardwareModel.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, bootloaderVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, abiList.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, securityPatchTag.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, displayVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, IncrementalVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, OSReleaseType.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, OSFullName.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, sdkApiVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, firstApiVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, versionId.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, buildType.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, buildUser.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, buildHost.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, buildTime.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, buildRootHash.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, distributionOSName.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, distributionOSVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, distributionOSApiVersion.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcat</span>(resultStr, distributionOSReleaseType.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    napi_value result;</span><br><span class="line">    <span class="built_in">napi_create_string_utf8</span>(env, resultStr, resultLength, &amp;result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">EXTERN_C_START</span></span><br><span class="line"><span class="function"><span class="type">static</span> napi_value <span class="title">Init</span><span class="params">(napi_env env, napi_value exports)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    napi_property_descriptor desc[] = &#123;</span><br><span class="line">        <span class="comment">// 设备信息</span></span><br><span class="line">        &#123;<span class="string">&quot;getDeviceInfo&quot;</span>, <span class="literal">nullptr</span>, GetDeviceInfo, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, napi_default, <span class="literal">nullptr</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">napi_define_properties</span>(env, exports, <span class="built_in">sizeof</span>(desc) / <span class="built_in">sizeof</span>(desc[<span class="number">0</span>]), desc);</span><br><span class="line">    <span class="keyword">return</span> exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">EXTERN_C_END</span><br><span class="line"><span class="type">static</span> napi_module demoModule = &#123;</span><br><span class="line">    .nm_version = <span class="number">1</span>,</span><br><span class="line">    .nm_flags = <span class="number">0</span>,</span><br><span class="line">    .nm_filename = <span class="literal">nullptr</span>,</span><br><span class="line">    .nm_register_func = Init,</span><br><span class="line">    .nm_modname = <span class="string">&quot;entry&quot;</span>,</span><br><span class="line">    .nm_priv = ((<span class="type">void</span> *)<span class="number">0</span>),</span><br><span class="line">    .reserved = &#123;<span class="number">0</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="注册模块"><a href="#注册模块" class="headerlink" title="注册模块"></a>注册模块</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __attribute__((constructor)) <span class="function"><span class="type">void</span> <span class="title">RegisterEntryModule</span><span class="params">(<span class="type">void</span>)</span> </span>&#123; <span class="built_in">napi_module_register</span>(&amp;demoModule); &#125;</span><br></pre></td></tr></table></figure>
<h3 id="定义调用函数"><a href="#定义调用函数" class="headerlink" title="定义调用函数"></a>定义调用函数</h3><p><strong>index.d.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">getDeviceInfo</span>: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure>

<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getDeviceInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;libentry.so&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">val deviceinfo = <span class="title function_">getDeviceInfo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(deviceinfo);</span><br></pre></td></tr></table></figure>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span>-<span class="number">19</span> <span class="number">11</span>:<span class="number">08</span>:<span class="number">10.384</span>   <span class="number">21645</span>-<span class="number">21645</span>   <span class="variable constant_">A03D00</span>/com.../<span class="variable constant_">JSAPP</span>  com.<span class="property">xw</span>....<span class="property">lication</span>   E     设备类型： phone, 厂家：<span class="variable constant_">HUAWEI</span>, 品牌：<span class="variable constant_">HUAWEI</span>, 外部产品系列：<span class="variable constant_">HUAWEI</span> <span class="title class_">Mate</span> <span class="number">60</span>, 产品系列：<span class="variable constant_">BRA</span>, 认证型号：<span class="variable constant_">BRA</span>-<span class="title class_">AL00</span>, 内部软件子型号：<span class="variable constant_">BRA</span>-<span class="title class_">AL00</span>, 硬件版本号：<span class="title class_">HL1FLSM</span>, 硬件<span class="title class_">Profile</span>：<span class="keyword">default</span>, <span class="title class_">Bootloader</span>版本号：bootloader, 应用二进制接口（<span class="title class_">Abi</span>）列表：arm64-v8a, 安全补丁级别：<span class="number">2024</span>/<span class="number">11</span>/<span class="number">01</span>, 产品版本：<span class="variable constant_">BRA</span>-<span class="title class_">AL00</span> <span class="number">5.0</span><span class="number">.0</span><span class="number">.110</span>(<span class="title class_">SP6C</span>00E107R4P22), 差异版本号：<span class="keyword">default</span>, 系统的发布类型：<span class="title class_">Beta3</span>, 系统版本：<span class="title class_">OpenHarmony</span>-<span class="number">5.0</span><span class="number">.1</span><span class="number">.107</span>(<span class="title class_">Beta3</span>), <span class="title class_">Major</span>版本号：<span class="number">5</span>, <span class="title class_">Senior</span>版本号：<span class="number">0</span>, <span class="title class_">Feature</span>版本号：<span class="number">1</span>, <span class="title class_">Build</span>版本号：<span class="number">107</span>, 系统软件<span class="variable constant_">API</span>版本：<span class="number">13</span>, 首个版本系统软件<span class="variable constant_">API</span>版本：<span class="number">1</span>, 版本<span class="variable constant_">ID</span>：phone/<span class="variable constant_">HUAWEI</span>/<span class="variable constant_">HUAWEI</span>/<span class="variable constant_">BRA</span>/<span class="title class_">OpenHarmony</span>-<span class="number">5.0</span><span class="number">.1</span><span class="number">.107</span>(<span class="title class_">Beta3</span>)/<span class="variable constant_">BRA</span>-<span class="title class_">AL00</span>/<span class="variable constant_">BRA</span>-<span class="title class_">AL00</span>/<span class="number">13</span>/<span class="keyword">default</span>/<span class="keyword">default</span>, 构建类型：<span class="keyword">default</span>, 构建用户：<span class="keyword">default</span>, 构建主机：<span class="keyword">default</span>, 构建时间：<span class="keyword">default</span>, 构建版本<span class="title class_">Hash</span>：<span class="keyword">default</span>, 发行版系统名称：, 发行版系统版本号：<span class="number">5.0</span><span class="number">.0</span>, 发行版系统api版本：<span class="number">50001</span>, 发行版系统api版本名称：<span class="number">5.0</span><span class="number">.1</span>, 发行版系统类型：<span class="title class_">Beta3</span>, 开发者匿名设备标识符(<span class="variable constant_">ODID</span>): 2699128d-<span class="number">5975</span>-<span class="number">8985</span>-8af4-bb30ce52....</span><br></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/posts/92e22166/demo_output_result.png" alt="alt text"></p>
]]></content>
      <categories>
        <category>HarmonyOS</category>
      </categories>
      <tags>
        <tag>HarmonyOS</tag>
        <tag>Native</tag>
        <tag>so</tag>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 16 设备如何越狱</title>
    <url>/posts/b3a0121c.html</url>
    <content><![CDATA[<p><img src="/posts/b3a0121c/image.png"></p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote>
<ul>
<li>工具: <a href="https://palera.in/">Palera1n</a> (A8 ~ A11)</li>
<li>设备: iPhone 8 (A11) 、iOS 16.7.10</li>
</ul>
</blockquote>
<h2 id="越狱"><a href="#越狱" class="headerlink" title="越狱"></a>越狱</h2><blockquote>
<ul>
<li>无根越狱: palera1n -l (rootless)</li>
<li>有根越狱: palera1n -f (rootful)</li>
</ul>
</blockquote>
<p>这里我们使用有根越狱: <strong>palera1n -f (rootful)</strong> 的方式</p>
<h3 id="创建有根越狱-fakeFS"><a href="#创建有根越狱-fakeFS" class="headerlink" title="创建有根越狱 fakeFS"></a>创建有根越狱 fakeFS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ palera1n -f -c</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># palera1n: v2.0.2 </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ========  Made by  =======</span></span><br><span class="line"><span class="comment"># Made by: Nick Chan, Ploosh, Khcrysalis, Mineek, staturnz, kok3shidoll, HAHALOSAH </span></span><br><span class="line"><span class="comment"># ======== Thanks to =======</span></span><br><span class="line"><span class="comment"># Thanks to: llsc12, Nebula, Lrdsnow, nikias (libimobiledevice),</span></span><br><span class="line"><span class="comment"># checkra1n team (Siguza, axi0mx, littlelailo et al.),</span></span><br><span class="line"><span class="comment"># Procursus Team (Hayden Seay, Cameron Katri, Keto et.al)</span></span><br><span class="line"><span class="comment"># ==========================</span></span><br><span class="line"></span><br><span class="line"> - [12/18/24 14:11:14] &lt;Info&gt;: Waiting <span class="keyword">for</span> devices</span><br><span class="line"> - [12/18/24 14:11:15] &lt;Info&gt;: Entering recovery mode</span><br><span class="line"> - [12/18/24 14:11:25] &lt;Info&gt;: Press Enter when ready <span class="keyword">for</span> DFU mode</span><br><span class="line"></span><br><span class="line">Hold volume down + side button (0)</span><br><span class="line">Hold volume down button (3)</span><br><span class="line"> - [12/18/24 14:11:39] &lt;Info&gt;: Device entered DFU mode successfully</span><br><span class="line"> - [12/18/24 14:11:40] &lt;Info&gt;: About to execute checkra1n</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Checkra1n 0.1337.3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Proudly written in nano</span></span><br><span class="line"><span class="comment"># (c) 2019-2023 Kim Jong Cracks</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#========  Made by  =======</span></span><br><span class="line"><span class="comment"># argp, axi0mx, danyl931, jaywalker, kirb, littlelailo, nitoTV</span></span><br><span class="line"><span class="comment"># never_released, nullpixel, pimskeks, qwertyoruiop, sbingner, siguza</span></span><br><span class="line"><span class="comment">#======== Thanks to =======</span></span><br><span class="line"><span class="comment"># haifisch, jndok, jonseals, xerub, lilstevie, psychotea, sferrini</span></span><br><span class="line"><span class="comment"># Cellebrite (ih8sn0w, cjori, ronyrus et al.)</span></span><br><span class="line"><span class="comment">#==========================</span></span><br><span class="line"></span><br><span class="line"> - [12/18/24 14:11:40] &lt;Verbose&gt;: Starting thread <span class="keyword">for</span> Apple TV 4K Advanced board</span><br><span class="line"> - [12/18/24 14:11:40] &lt;Info&gt;: Waiting <span class="keyword">for</span> DFU mode devices</span><br><span class="line"> - [12/18/24 14:11:43] &lt;Verbose&gt;: DFU mode device found</span><br><span class="line"> - [12/18/24 14:11:43] &lt;Info&gt;: Checking <span class="keyword">if</span> device is ready</span><br><span class="line"> - [12/18/24 14:11:43] &lt;Verbose&gt;: Attempting to perform checkm8 on 8015 11</span><br><span class="line"> - [12/18/24 14:11:43] &lt;Info&gt;: Setting up the exploit</span><br><span class="line"> - [12/18/24 14:11:43] &lt;Verbose&gt;: == checkm8 setup stage ==</span><br><span class="line"> - [12/18/24 14:11:43] &lt;Verbose&gt;: Entered initial checkm8 state after 1 steps</span><br><span class="line"> - [12/18/24 14:11:44] &lt;Verbose&gt;: Stalled input endpoint after 3084 steps</span><br><span class="line"> - [12/18/24 14:11:45] &lt;Verbose&gt;: DFU mode device disconnected</span><br><span class="line"> - [12/18/24 14:11:45] &lt;Verbose&gt;: DFU mode device found</span><br><span class="line"> - [12/18/24 14:11:45] &lt;Verbose&gt;: == checkm8 trigger stage ==</span><br><span class="line"> - [12/18/24 14:11:45] &lt;Info&gt;: Checkmate!</span><br><span class="line"> - [12/18/24 14:11:45] &lt;Verbose&gt;: Device should now reconnect <span class="keyword">in</span> download mode</span><br><span class="line"> - [12/18/24 14:11:45] &lt;Verbose&gt;: DFU mode device disconnected</span><br><span class="line"> - [12/18/24 14:11:51] &lt;Info&gt;: Entered download mode</span><br><span class="line"> - [12/18/24 14:11:51] &lt;Verbose&gt;: Download mode device found</span><br><span class="line"> - [12/18/24 14:11:51] &lt;Info&gt;: Booting PongoOS...</span><br><span class="line"> - [12/18/24 14:11:53] &lt;Info&gt;: Found PongoOS USB Device</span><br><span class="line"> - [12/18/24 14:11:54] &lt;Info&gt;: Booting Kernel...</span><br><span class="line"> - [12/18/24 14:11:54] &lt;Info&gt;: Please <span class="built_in">wait</span> up to 10 minutes <span class="keyword">for</span> the fakefs to be created.</span><br><span class="line"> - [12/18/24 14:11:54] &lt;Info&gt;: Once the device reboots into recovery mode, run again without the -c (Create FakeFS) option to jailbreak.</span><br></pre></td></tr></table></figure>
<h3 id="有根越狱"><a href="#有根越狱" class="headerlink" title="有根越狱"></a>有根越狱</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ palera1n -f</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># palera1n: v2.0.2 </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ========  Made by  =======</span></span><br><span class="line"><span class="comment"># Made by: Nick Chan, Ploosh, Khcrysalis, Mineek, staturnz, kok3shidoll, HAHALOSAH </span></span><br><span class="line"><span class="comment"># ======== Thanks to =======</span></span><br><span class="line"><span class="comment"># Thanks to: llsc12, Nebula, Lrdsnow, nikias (libimobiledevice),</span></span><br><span class="line"><span class="comment"># checkra1n team (Siguza, axi0mx, littlelailo et al.),</span></span><br><span class="line"><span class="comment"># Procursus Team (Hayden Seay, Cameron Katri, Keto et.al)</span></span><br><span class="line"><span class="comment"># ==========================</span></span><br><span class="line"></span><br><span class="line"> - [12/18/24 14:19:18] &lt;Info&gt;: Waiting <span class="keyword">for</span> devices</span><br><span class="line"> - [12/18/24 14:19:19] &lt;Info&gt;: Press Enter when ready <span class="keyword">for</span> DFU mode</span><br><span class="line"></span><br><span class="line">Hold volume down + side button (0)</span><br><span class="line">Hold volume down button (3)</span><br><span class="line"> - [12/18/24 14:19:37] &lt;Info&gt;: Device entered DFU mode successfully</span><br><span class="line"> - [12/18/24 14:19:37] &lt;Info&gt;: About to execute checkra1n</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Checkra1n 0.1337.3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Proudly written in nano</span></span><br><span class="line"><span class="comment"># (c) 2019-2023 Kim Jong Cracks</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#========  Made by  =======</span></span><br><span class="line"><span class="comment"># argp, axi0mx, danyl931, jaywalker, kirb, littlelailo, nitoTV</span></span><br><span class="line"><span class="comment"># never_released, nullpixel, pimskeks, qwertyoruiop, sbingner, siguza</span></span><br><span class="line"><span class="comment">#======== Thanks to =======</span></span><br><span class="line"><span class="comment"># haifisch, jndok, jonseals, xerub, lilstevie, psychotea, sferrini</span></span><br><span class="line"><span class="comment"># Cellebrite (ih8sn0w, cjori, ronyrus et al.)</span></span><br><span class="line"><span class="comment">#==========================</span></span><br><span class="line"></span><br><span class="line"> - [12/18/24 14:19:38] &lt;Verbose&gt;: Starting thread <span class="keyword">for</span> Apple TV 4K Advanced board</span><br><span class="line"> - [12/18/24 14:19:38] &lt;Info&gt;: Waiting <span class="keyword">for</span> DFU mode devices</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: DFU mode device found</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Info&gt;: Checking <span class="keyword">if</span> device is ready</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: Attempting to perform checkm8 on 8015 11</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Info&gt;: Setting up the exploit</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: == checkm8 setup stage ==</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: Entered initial checkm8 state after 1 steps</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: Stalled input endpoint after 439 steps</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: DFU mode device disconnected</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: DFU mode device found</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: == checkm8 trigger stage ==</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Info&gt;: Checkmate!</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: Device should now reconnect <span class="keyword">in</span> download mode</span><br><span class="line"> - [12/18/24 14:19:42] &lt;Verbose&gt;: DFU mode device disconnected</span><br><span class="line"> - [12/18/24 14:19:49] &lt;Info&gt;: Entered download mode</span><br><span class="line"> - [12/18/24 14:19:49] &lt;Verbose&gt;: Download mode device found</span><br><span class="line"> - [12/18/24 14:19:49] &lt;Info&gt;: Booting PongoOS...</span><br><span class="line"> - [12/18/24 14:19:51] &lt;Info&gt;: Found PongoOS USB Device</span><br><span class="line"> - [12/18/24 14:19:51] &lt;Info&gt;: Booting Kernel...</span><br></pre></td></tr></table></figure>
<h3 id="安装市场和必要插件"><a href="#安装市场和必要插件" class="headerlink" title="安装市场和必要插件"></a>安装市场和必要插件</h3><blockquote>
<ul>
<li>越狱完成后，成功进入系统会显示<strong>Palera1n的开机画面</strong></li>
<li>进入SpringBoard后，会有<strong>palera1n的图标</strong>加载出现(最后一个图标)</li>
</ul>
</blockquote>
<p><strong>满足以上两点，代表越狱流程顺利完成</strong></p>
<p><img src="/posts/b3a0121c/20241218_142212_274.png"></p>
<p>① 点击进入palera1n应用</p>
<p><img src="/posts/b3a0121c/20241218_142346_906.png"></p>
<p>② 点击Sileo,安装市场</p>
<p><img src="/posts/b3a0121c/20241218_142405_369.png"></p>
<p>③ 设置SSH, mobile默认密码</p>
<p><img src="/posts/b3a0121c/20241218_142414_585.png"></p>
<p>④ Sileo市场安装成功</p>
<p><img src="/posts/b3a0121c/20241218_142458_967.png"></p>
<p>⑤ 进入Sileo市场, 安装好以下几个基本必要的插件</p>
<blockquote>
<ul>
<li>openssh (SSH访问到iPhone设备内部)</li>
<li>Ellekit (所有运行插件的基础库)</li>
<li>Appsync (绕过app的证书签名校验)</li>
</ul>
</blockquote>
<h3 id="修改SSH密码"><a href="#修改SSH密码" class="headerlink" title="修改SSH密码"></a>修改SSH密码</h3><p>通过上面设置的mobile用户SSH进入手机内部</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh mobile@192.168.1.105</span><br><span class="line">(mobile@192.168.1.105) Password <span class="keyword">for</span> mobile@iPhone:</span><br></pre></td></tr></table></figure>

<p>修改root用户的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> passwd root</span><br><span class="line"></span><br><span class="line">We trust you have received the usual lecture from the <span class="built_in">local</span> System</span><br><span class="line">Administrator. It usually boils down to these three things:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#1) Respect the privacy of others.</span></span><br><span class="line">    <span class="comment">#2) Think before you type.</span></span><br><span class="line">    <span class="comment">#3) With great power comes great responsibility.</span></span><br><span class="line"></span><br><span class="line">For security reasons, the password you <span class="built_in">type</span> will not be visible.</span><br><span class="line"></span><br><span class="line">[meow] password <span class="keyword">for</span> mobile: </span><br><span class="line">Changing password <span class="keyword">for</span> root.</span><br><span class="line">Old Password:</span><br><span class="line">New Password:</span><br><span class="line">Retype New Password:</span><br><span class="line"></span><br><span class="line"><span class="comment">################################### WARNING ###################################</span></span><br><span class="line"><span class="comment"># This tool does not update the login keychain password.                      #</span></span><br><span class="line"><span class="comment"># To update it, run `security set-keychain-password` as the user in question, #</span></span><br><span class="line"><span class="comment"># or as root providing a path to such user&#x27;s login keychain.                  #</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>切换到root用户下，验证当前用户是否是root</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> su</span><br><span class="line">iPhone:/private/var/mobile root# <span class="built_in">whoami</span></span><br><span class="line">root</span><br><span class="line">iPhone:/private/var/mobile root# </span><br></pre></td></tr></table></figure>

<p>至此，我们在iPhone 8 (iOS 16)设备越狱环境基本上配置完成，可以完成后续的各种逆向和DIY等玩法了</p>
<p>越狱完成，如果我们想恢复到原始系统，那么就要移除越狱</p>
<h2 id="移除越狱"><a href="#移除越狱" class="headerlink" title="移除越狱"></a>移除越狱</h2><p>以Rootful有根越狱为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ palera1n -f --force-revert</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># palera1n: v2.0.2 </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ========  Made by  =======</span></span><br><span class="line"><span class="comment"># Made by: Nick Chan, Ploosh, Khcrysalis, Mineek, staturnz, kok3shidoll, HAHALOSAH </span></span><br><span class="line"><span class="comment"># ======== Thanks to =======</span></span><br><span class="line"><span class="comment"># Thanks to: llsc12, Nebula, Lrdsnow, nikias (libimobiledevice),</span></span><br><span class="line"><span class="comment"># checkra1n team (Siguza, axi0mx, littlelailo et al.),</span></span><br><span class="line"><span class="comment"># Procursus Team (Hayden Seay, Cameron Katri, Keto et.al)</span></span><br><span class="line"><span class="comment"># ==========================</span></span><br><span class="line"></span><br><span class="line"> - [12/19/24 08:44:11] &lt;Info&gt;: Waiting <span class="keyword">for</span> devices</span><br><span class="line"> - [12/19/24 08:44:11] &lt;Info&gt;: Entering recovery mode</span><br><span class="line"> - [12/19/24 08:44:22] &lt;Info&gt;: Press Enter when ready <span class="keyword">for</span> DFU mode</span><br><span class="line"></span><br><span class="line">Hold volume down + side button (0)</span><br><span class="line">Hold volume down button (4)</span><br><span class="line"> - [12/19/24 08:44:37] &lt;Info&gt;: Device entered DFU mode successfully</span><br><span class="line"> - [12/19/24 08:44:37] &lt;Info&gt;: About to execute checkra1n</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Checkra1n 0.1337.3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Proudly written in nano</span></span><br><span class="line"><span class="comment"># (c) 2019-2023 Kim Jong Cracks</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#========  Made by  =======</span></span><br><span class="line"><span class="comment"># argp, axi0mx, danyl931, jaywalker, kirb, littlelailo, nitoTV</span></span><br><span class="line"><span class="comment"># never_released, nullpixel, pimskeks, qwertyoruiop, sbingner, siguza</span></span><br><span class="line"><span class="comment">#======== Thanks to =======</span></span><br><span class="line"><span class="comment"># haifisch, jndok, jonseals, xerub, lilstevie, psychotea, sferrini</span></span><br><span class="line"><span class="comment"># Cellebrite (ih8sn0w, cjori, ronyrus et al.)</span></span><br><span class="line"><span class="comment">#==========================</span></span><br><span class="line"></span><br><span class="line"> - [12/19/24 08:44:38] &lt;Verbose&gt;: Starting thread <span class="keyword">for</span> Apple TV 4K Advanced board</span><br><span class="line"> - [12/19/24 08:44:38] &lt;Info&gt;: Waiting <span class="keyword">for</span> DFU mode devices</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Verbose&gt;: DFU mode device found</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Info&gt;: Checking <span class="keyword">if</span> device is ready</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Verbose&gt;: Attempting to perform checkm8 on 8015 11</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Info&gt;: Setting up the exploit</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Verbose&gt;: == checkm8 setup stage ==</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Verbose&gt;: Entered initial checkm8 state after 1 steps</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Verbose&gt;: Stalled input endpoint after 606 steps</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Verbose&gt;: DFU mode device disconnected</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Verbose&gt;: DFU mode device found</span><br><span class="line"> - [12/19/24 08:44:42] &lt;Verbose&gt;: == checkm8 trigger stage ==</span><br><span class="line"> - [12/19/24 08:44:45] &lt;Info&gt;: Checkmate!</span><br><span class="line"> - [12/19/24 08:44:45] &lt;Verbose&gt;: Device should now reconnect <span class="keyword">in</span> download mode</span><br><span class="line"> - [12/19/24 08:44:45] &lt;Verbose&gt;: DFU mode device disconnected</span><br><span class="line"> - [12/19/24 08:44:51] &lt;Info&gt;: Entered download mode</span><br><span class="line"> - [12/19/24 08:44:51] &lt;Verbose&gt;: Download mode device found</span><br><span class="line"> - [12/19/24 08:44:51] &lt;Info&gt;: Booting PongoOS...</span><br><span class="line"> - [12/19/24 08:44:53] &lt;Info&gt;: Found PongoOS USB Device</span><br><span class="line"> - [12/19/24 08:44:53] &lt;Info&gt;: Booting Kernel...</span><br></pre></td></tr></table></figure>

<p>重启之后进入系统，会弹窗需要<strong>再次重启移除越狱</strong>或者<strong>进入恢复模式重新越狱</strong></p>
<p><img src="/posts/b3a0121c/20241219_084540_996.png"></p>
<p>这里我们点击<strong>Reboot now</strong>, 重启设备开机<strong>看不到palera1n的开机动画</strong>，进入系统也<strong>没有palera1n的桌面图标</strong></p>
<p>至此移除越狱成功</p>
<p><img src="/posts/b3a0121c/20241219_090151_523.png"></p>
<h3 id="相关文献"><a href="#相关文献" class="headerlink" title="相关文献"></a>相关文献</h3><p>本文简要的记录 iOS 16 越狱和移除越狱流程, 更多玩法或其他内容,请参阅以下文献</p>
<blockquote>
<ul>
<li><a href="https://ios.cfw.guide/get-started/">CFW iOS Guide</a></li>
<li><a href="https://dkxuanye.cn/">玄烨品果</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>jailbreak</tag>
        <tag>iOS</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
</search>
